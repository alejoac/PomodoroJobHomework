

<style>
   /* Style for the to do list */
    ul {
        margin: 0;
        padding: 0;
    }

    /* Style the list items */
    ul li {
        cursor: pointer;
        position: relative;
        padding: 12px 8px 12px 40px;
        list-style-type: none;
        background: #eee;
        font-size: 18px;
        transition: 0.2s;
        /* make the list items unselectable */
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    ul li:nth-child(odd) {
        background: #f9f9f9;
    }

    ul li:hover {
        background: #ddd;
    }

    ul li.checked {
        background: #888;
        color: #fff;
        text-decoration: line-through;
    }

    ul li.checked::before {
        content: '';
        position: absolute;
        border-color: #fff;
        border-style: solid;
        border-width: 0 2px 2px 0;
        top: 10px;
        left: 16px;
        transform: rotate(45deg);
        height: 15px;
        width: 7px;
    }

    .close {
        position: absolute;
        right: 0;
        top: 0;
        padding: 12px 16px 12px 16px;
    }

    .close:hover {
        background-color: #f44336;
        color: white;
    }

    /* Style the header */
    .header {
        background-color: #428bca;
        padding: 30px 40px;
        color: white;
        text-align: center;
    }

    .header:after {
        content: "";
        display: table;
        clear: both;
    }

    /* Style the input */
    input {
        border: none;
        width: 75%;
        padding: 10px;
        float: left;
        color: #f00;
        font-size: 16px;
        text-emphasis:dot;
    }

    /* Style the "Add" button */
    .addBtn {
        padding: 10px;
        width: 25%;
        color: #fff;
        float: left;
        text-align: center;
        font-size: 16px;
        cursor: pointer;
        transition: 0.3s;
        background : #080;
        border-radius : 50px;
    }

    .addBtn:hover {
        background-color: #bbb;
    }
    
    /* Style for the pomodoro clock*/

    /* Style for the clock part */
    #timer{ 
      color:#f00; 
      font-size:50px; 
      margin:10px auto;
      width:200px;
      overflow:hidden;
      position:relative;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      cursor:default;
    }

    #time{
      margin-top:10px;
      z-index : 1;
      position:relative;
    }

    #filler{
      background : #ddffcc;
      height: 0px;
      width: 200px;
      position:absolute;
      bottom:0;
    }
    
    /* Style for the buttons */
    #buttons button { 
      background:#4da6ff; 
      border:none; 
      color:#fff; 
      cursor:pointer; 
      padding:5px; 
      width:90px; 
      margin:10px auto;
      font-size:14px;
      height : 50px;
      border-radius : 50px;
    }

    #buttons button#shortBreak{
      background : #0c0;
    }

    #buttons button#longBreak{
      background : #080;
    }

    #buttons button#stop{
      background : #f00;
    }

</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

<style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 1500px}

    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }

    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }

      .row.content {height: auto;}
    }
</style>

<script type="text/javascript">

$(document).ready(function () {

    pomodoroClock.init();
    
    //Now init the to do list components
    var myNodelist = document.getElementsByTagName("LI");
    var i;
    for (i = 0; i < myNodelist.length; i++) {
        var span = document.createElement("SPAN");
        var txt = document.createTextNode("\u00D7");
        span.className = "close";
        span.appendChild(txt);
        myNodelist[i].appendChild(span);
    }    
    var close = document.getElementsByClassName("close");
    var i;
    for (i = 0; i < close.length; i++) {
        close[i].onclick = function () {
            var div = this.parentElement;
            div.style.display = "none";
        }
    }
    var list = document.querySelector('ul');
    list.addEventListener('click', function (ev) {
        if (ev.target.tagName === 'LI') {
            ev.target.classList.toggle('checked');
            CompleteTask(ev.target.innerText.replace("×", ""));
        }
    }, false);

    });

    //Call the web API and get the list of ITEMS
    function GetAllTasks() {
        jQuery.support.cors = true;
        $.ajax({
            url: 'http://localhost:28895/api/tasks',
            type: 'GET',
            dataType: 'json',
            //success: function (data) {
            //    alert(JSON.stringify(data));
            //},
            error: function (x, y, z) {
                alert("ERR is human " + JSON.stringify(x) + '\n Otherly' + JSON.stringify(y) + '\n' + JSON.stringify(y));
            }
        });
}

    //Update a task as completed
    function CompleteTask(taskName) {
        jQuery.support.cors = true;
        var task = {
            TaskName:taskName,
            TaskIsCompleted: "true",
        };

        $.ajax({
            url: 'http://localhost:28895/api/tasks/?taskName=' + taskName,
            type: 'PUT',
            data: JSON.stringify(task),
            contentType: "application/json;charset=utf-8",
            //success: function (data) {
            //    WriteResponse("This is the data: " + data);
            //},
            error: function (x, y, z) {
                alert("Error" + x + '\n' + y + '\n' + z);
            }
        });
    }

    //Add a task to the db calling the API
    function AddTask(taskName) {
        jQuery.support.cors = true;
        var task = {        
            TaskDescription: taskName,
            UserId: "1",
            TaskIsCompleted:"false",
            TaskIsDiscarded:"false",
        };
        $.ajax({
            url: 'http://localhost:28895/api/tasks',
            type: 'POST',
            data: JSON.stringify(task),
            contentType: "application/json;charset=utf-8",
            success: function (data) {
                WriteResponse( data);
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    }

    // Create a new list item when clicking on the "Add" button
    function newElement() {
        var li = document.createElement("li");
        var inputValue = document.getElementById("myInput").value;
        var t = document.createTextNode(inputValue);

        //Tell teh web API
        AddTask(inputValue);

        //Add the new items to the list
        li.appendChild(t);
        if (inputValue === '') {
            alert("You must write something!");
        } else {
            document.getElementById("myUL").appendChild(li);
        }
        document.getElementById("myInput").value = "";

        var span = document.createElement("SPAN");
        var txt = document.createTextNode("\u00D7");
        span.className = "close";
        span.appendChild(txt);
        li.appendChild(span);

        for (i = 0; i < close.length; i++) {
            close[i].onclick = function () {
                var div = this.parentElement;
                div.style.display = "none";
            }
        }



    }

    var pomodoroClock = {

    isStarted: false,
    minutesTotal: 0,
    secondsTotal: 0,
    fillerHeight: 0,
    fillerIncrement: 0,
    interval: null,
    minutesDom: null,
    secondsDom: null,
    fillerDom: null,
    init: function () {
        var self = this;
        this.minutesDom = $('#minutes');
        this.secondsDom = $('#seconds');
        this.fillerDom = $('#filler');
        this.interval = setInterval(function () {
            self.intervalCallback.apply(self);
        }, 1000);
        $('#work').click(function () {
            self.startWork.apply(self);
        });
        $('#shortBreak').click(function () {
            self.startShortBreak.apply(self);
        });
        $('#longBreak').click(function () {
            self.startLongBreak.apply(self);
        });
        $('#stop').click(function () {
            self.stopTimer.apply(self);
        });
    },
    resetVariables: function (mins, secs, isStarted) {
        this.minutesTotal = mins;
        this.secondsTotal = secs;
        this.isStarted = isStarted;
        this.fillerIncrement = 200 / (this.minutesTotal * 60);
    },    
    startShortBreak: function () {
        this.resetVariables(4, 0, true);
    },
    startLongBreak: function () {
        this.resetVariables(15, 0, true);
    },
    stopTimer: function () {
        this.resetVariables(25, 0, false);
        this.updateDom();
    },
    toDoubleDigit: function (num) {
        if (num < 10) {
            return "0" + parseInt(num, 10);
        }
        return num;
    },
    updateDom: function () {
        this.minutesDom.text(this.toDoubleDigit(this.minutesTotal));
        this.secondsDom.text(this.toDoubleDigit(this.secondsTotal));
    },
    intervalCallback: function () {
        if (!this.isStarted) return false;
        if (this.secondsTotal == 0) {
            if (this.minutesTotal == 0) {
                this.timerComplete();
                alert("Time is up!");
                return;
            }
            this.secondsTotal = 59;
            this.minutesTotal--;
        } else {
            this.secondsTotal--;
        }
        this.updateDom();
    },
    timerComplete: function () {
        this.isStarted = false;
    },
    startWork() {
        this.resetVariables(25, 0, true);
    }
};

</script>


<div class="container-fluid">
 
    <header><h1 style="margin:5px">Pomodoro Assignment</h1></header>
    <hr>
    <div class="row content">
        
        <div class="col-sm-9">
            <div id="myDIV" class="header">                
                <input type="text" id="myInput" placeholder="Title..." style="color:black">
                <span onclick="newElement()" class="addBtn">Add</span>
            </div>

            <ul id="myUL">
                <li id="1">Hit the gym</li>
                <li id="2" class="checked">Pay bills</li>
                <li id="3">Meet George</li>
                <li>Buy eggs</li>
                <li>Read a book</li>
                <li>Organize office</li>
            </ul>
        </div>

        <div class="col-sm-3 sidenav">
            <h4>Keep On Top of Your Time</h4>
            
                <ul class="nav nav-pills nav-stacked">

                    <div id="pomodoroClock-app">

                        <div id="container">
                            <div id="timer">
                                <div id="time">
                                    <span id="minutes" class="pClock">25</span>
                                    <span id="colon" class="pClock">:</span>
                                    <span id="seconds" class="pClock">00</span>
                                </div>
                                <div id="filler"></div>
                            </div>

                            <div id="buttons">
                                <li><a href="#section2"><button id="work">Work</button></a></li>
                                <li><a href="#section2"><button id="shortBreak">Short Break</button></a></li>
                                <li><a href="#section3"><button id="longBreak">Long Break</button></a></li>
                                <li><a href="#section3"><button id="stop">Stop</button></a></li>
                                
                            </div>
                        </div>
                    </div>
                </ul>
                <br>
        </div>
    </div>
</div>

